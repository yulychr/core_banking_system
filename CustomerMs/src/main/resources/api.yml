openapi: 3.0.3
info:
  title: Customer Microservice
  description: |-
    This microservice is responsible for customer management.It allows the creation, listing, retrieval, updating, and deletion of customer information.

    The main funtionalites include:
    - Create a new customer.
    - List all customers.
    - Retrieve a customer details by ID. 
    - Update an existing customer by ID 
    - Delete customer by id
  version: 1.0.0
servers:
  - url: https://localhost:8086
tags:
  - name: customer
    description: Everything about costumers

paths:
  /customers:
    post:
      tags:
        - customer
      summary: Create a new customer
      description: Create a new customer
      operationId: createCustomer
      requestBody:
        description: Create a new customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      responses:
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "409":
          description: Conflict, resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                dniExists:
                  summary: DNI already exists
                  value:
                    code: "409"
                    message: "DNI already exists"
                    details:
                      field: "dni"
                      issue: "dni_already_exists"

        "422":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                emailFormat:
                  summary: Email format is not valid
                  value:
                    code: "422"
                    message: "Email format is not valid"
                    details:
                      field: "email"
                      issue: "email_format_is_not_valid"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    get:
      tags:
        - customer
      summary: List all customers
      description: Retrieves a list of all customers in the system.
      operationId: getAllCustomers
      responses:
        "200":
          description: Successfully retrieved the list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
        "404":
          description: Customers not found.
  /customers/{id}:
    get:
      tags:
        - customer
      summary: Retrieve a customer details by id
      description: Retrieve a customer details by id
      operationId: getCustomerId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    put:
      tags:
        - customer
      summary: Update an existing customer by ID
      description: Updates the details of an existing customer identified by the `id` provided in the path.
      operationId: updateCutomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "409":
          description: Conflict, resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                dniExists:
                  summary: DNI already exists
                  value:
                    code: "409"
                    message: "DNI already exists"
                    details:
                      field: "dni"
                      issue: "dni_already_exists"
        "422":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                emailExists:
                  summary: Email format is not valid
                  value:
                    code: "422"
                    message: "Email format is not valid"
                    details:
                      field: "email"
                      issue: "email_format_is_not_valid"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      tags:
        - customer
      summary: Delete customer by id
      description: Delete customer by id
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Customer successfully deleted
        "422":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                customerHasActiveAccounts:
                  summary: Customer has active accounts validation
                  value:
                    code: "422"
                    message: "This customer cannot be deleted, customer has active accounts."
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
components:
  schemas:
    Customer:
      required:
        - firstName
        - lastName
        - dni
        - email
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: Unique identifier for an customer.
          readOnly: true
        firstName:
          type: string
          example: "Yuly"
        lastName:
          type: string
          example: "Choque"
        dni:
          type: string
          example: "12345678"
          description: The DNI is unique for each client.
        email:
          type: string
          format: email
          example: "yuly@gmail.com"
      xml:
        name: order
    ModelApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
